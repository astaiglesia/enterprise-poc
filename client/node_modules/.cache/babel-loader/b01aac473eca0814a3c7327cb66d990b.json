{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // MVP to handle 1 project at a time\n// stretch to toggle between multiple projects\n\nconst initialState = {\n  project1: {},\n  project2: {},\n  project3: {}\n};\nexport const manageContentSlice = createSlice({\n  name: 'manageContent',\n  initialState,\n  reducers: {\n    manageProject: (state, action) => {\n      console.log(action.payload);\n      state.project1 = action.payload; // (!state.project1._id) ? state.project1 = action.payload\n      //   : state.project2 = action.payload   // will cause an overwrite of project2 if both are filled, ideate logic to handle multiple loads\n    }\n  }\n});\nexport const {\n  manageProject\n} = manageContentSlice.actions;\nexport default manageContentSlice.reducer;","map":{"version":3,"sources":["/home/aurasonicSkyfire/github/levelUp/zz-poc/client/src/features/ManageContent/manageContentSlice.js"],"names":["createSlice","initialState","project1","project2","project3","manageContentSlice","name","reducers","manageProject","state","action","console","log","payload","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;AACA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,QAAQ,EAAE;AAHS,CAArB;AAMA,OAAO,MAAMC,kBAAkB,GAAGL,WAAW,CAAC;AAC5CM,EAAAA,IAAI,EAAE,eADsC;AAE5CL,EAAAA,YAF4C;AAG5CM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAnB;AACAJ,MAAAA,KAAK,CAACP,QAAN,GAAiBQ,MAAM,CAACG,OAAxB,CAFgC,CAGhC;AACA;AACD;AANO;AAHkC,CAAD,CAAtC;AAaP,OAAO,MAAM;AAAEL,EAAAA;AAAF,IAAoBH,kBAAkB,CAACS,OAA7C;AAEP,eAAeT,kBAAkB,CAACU,OAAlC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// MVP to handle 1 project at a time\n// stretch to toggle between multiple projects\nconst initialState = {\n  project1: {},\n  project2: {},\n  project3: {}\n};\n\nexport const manageContentSlice = createSlice({\n  name: 'manageContent',\n  initialState,\n  reducers: {\n    manageProject: (state, action) => {\n      console.log(action.payload);\n      state.project1 = action.payload\n      // (!state.project1._id) ? state.project1 = action.payload\n      //   : state.project2 = action.payload   // will cause an overwrite of project2 if both are filled, ideate logic to handle multiple loads\n    },\n  },\n});\n\nexport const { manageProject } = manageContentSlice.actions;\n\nexport default manageContentSlice.reducer;"]},"metadata":{},"sourceType":"module"}