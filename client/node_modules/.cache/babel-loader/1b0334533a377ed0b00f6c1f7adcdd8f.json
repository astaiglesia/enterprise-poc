{"ast":null,"code":"var _jsxFileName = \"/home/computron/github/levelUp/redux-learning/src/features/LoginPage/LoginModal/LoginModal.jsx\",\n    _s = $RefreshSig$();\n\n// need to hide password\n// need to reset the form fields on submit\n// codesplit component\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from 'react-dom';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\nimport styles from './LoginModal.module.css';\nimport ModalBackdrop from \"./Backdrop/Backdrop\";\nimport { toggleLoginModal } from '../loginPageSlice';\nimport { attemptLogin } from \"./loginModalSlice\"; // ---- OVERLAY COMPONENT ----\n// local state collects form data and dispatches to redux-thunk\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginOverlay = () => {\n  _s();\n\n  const initialState = {\n    user: '',\n    password: ''\n  };\n  const [formData, setFormData] = useState(initialState);\n\n  const userHandler = e => {\n    setFormData(currentState => {\n      return { ...currentState,\n        user: e.target.value\n      };\n    });\n  };\n\n  const passwordHandler = e => {\n    setFormData(currentState => {\n      return { ...currentState,\n        password: e.target.value\n      };\n    });\n  };\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate(); // ###=========== WORK ON AUTHENTICATION LOGIC =========###\n  // dispatch to redux-thunk for authentication\n  // -- if validated, redirect to dashboard page\n  // -- on fail, render fail\n\n  const [isValidUser, setIsValidUser] = useState(false);\n  const [didAuthFail, setDidAuthFail] = useState(false);\n  console.log(isValidUser, didAuthFail); // ---- handle site entry for auth'd users and guests with no login\n\n  const validEntryHandler = () => navigate('/dashboard');\n\n  const loginAttemptHandler = e => {\n    e.preventDefault(); // e.target.blur();\n    // call async AttemptLogin\n\n    dispatch(attemptLogin(formData)); // -- handle promise onFulfillment ### currently mocking a valid authentication\n\n    setIsValidUser(current => !current); // <----- mock successful user auth\n  };\n\n  useEffect(() => {\n    if (isValidUser) {\n      console.log('are we reaching this?', isValidUser);\n      return validEntryHandler();\n    } // else {\n    //   // handle authentication failure  // mocks an auth fail\n    //   setDidAuthFail(currentState => {\n    //     setFormData(initialState);\n    //     return !currentState;\n    //   }); \n    // }\n\n  }, [isValidUser, validEntryHandler]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.modal,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles['login-form'],\n      onSubmit: loginAttemptHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"user\",\n        children: \"user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"user\",\n        id: \"user\",\n        value: formData.user,\n        required: true,\n        onChange: userHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"password\",\n        id: \"password\",\n        value: formData.password,\n        required: true,\n        onChange: passwordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        \"aria-label\": \"Submit login credentials\",\n        children: \"login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), didAuthFail && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.loginFail,\n        children: \"login failed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        \"aria-label\": \"Guest Entry\",\n        onClick: validEntryHandler,\n        children: \"guest pass\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}; // ---- END OVERLAY COMPONENT ----\n\n\n_s(LoginOverlay, \"Hn/pKoNTVrUMkeQf13C0GRpeIcs=\", false, function () {\n  return [useDispatch, useNavigate];\n});\n\n_c = LoginOverlay;\n\nconst LoginModal = () => {\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(ModalBackdrop, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 30\n    }, this), document.getElementById('backdrop-root')), /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(LoginOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 30\n    }, this), document.getElementById('overlay-root'))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = LoginModal;\nexport default LoginModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LoginOverlay\");\n$RefreshReg$(_c2, \"LoginModal\");","map":{"version":3,"sources":["/home/computron/github/levelUp/redux-learning/src/features/LoginPage/LoginModal/LoginModal.jsx"],"names":["React","useEffect","useState","ReactDOM","useSelector","useDispatch","Navigate","useNavigate","styles","ModalBackdrop","toggleLoginModal","attemptLogin","LoginOverlay","initialState","user","password","formData","setFormData","userHandler","e","currentState","target","value","passwordHandler","dispatch","navigate","isValidUser","setIsValidUser","didAuthFail","setDidAuthFail","console","log","validEntryHandler","loginAttemptHandler","preventDefault","current","modal","loginFail","LoginModal","createPortal","document","getElementById"],"mappings":"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","sourcesContent":["// need to hide password\n// need to reset the form fields on submit\n// codesplit component\n\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from 'react-dom';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\n\nimport styles from './LoginModal.module.css';\n\nimport ModalBackdrop from \"./Backdrop/Backdrop\";\nimport { toggleLoginModal } from '../loginPageSlice';\nimport { attemptLogin } from \"./loginModalSlice\";\n\n\n// ---- OVERLAY COMPONENT ----\n// local state collects form data and dispatches to redux-thunk\nconst LoginOverlay = () => {\n  const initialState = {\n    user: '',\n    password: '',\n  }\n  \n  const [formData, setFormData] = useState(initialState);\n\n  const userHandler = e => {\n    setFormData(currentState => {\n      return {\n        ...currentState,\n        user: e.target.value,\n      }\n    })\n  }\n\n  const passwordHandler = e => {\n    setFormData(currentState => {\n      return {\n        ...currentState,\n        password: e.target.value,\n      }\n    })\n  }\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  \n\n\n\n// ###=========== WORK ON AUTHENTICATION LOGIC =========###\n  // dispatch to redux-thunk for authentication\n  // -- if validated, redirect to dashboard page\n  // -- on fail, render fail\n  const [isValidUser, setIsValidUser] = useState(false);\n  const [didAuthFail, setDidAuthFail] = useState(false);\n  console.log(isValidUser, didAuthFail);\n\n  // ---- handle site entry for auth'd users and guests with no login\n  const validEntryHandler = () => navigate('/dashboard');\n\n  const loginAttemptHandler = e => {\n    e.preventDefault();\n    // e.target.blur();\n\n    // call async AttemptLogin\n    dispatch(attemptLogin(formData));\n    \n    // -- handle promise onFulfillment ### currently mocking a valid authentication\n    setIsValidUser(current => !current);  // <----- mock successful user auth\n  }\n  \n  useEffect( () => {\n    if (isValidUser) {\n      console.log('are we reaching this?', isValidUser)\n      return validEntryHandler();\n    } \n    // else {\n    //   // handle authentication failure  // mocks an auth fail\n    //   setDidAuthFail(currentState => {\n    //     setFormData(initialState);\n    //     return !currentState;\n    //   }); \n    // }\n  }, [isValidUser, validEntryHandler]);\n\n  return (\n    <div className={styles.modal} >\n      <form className={styles['login-form']} onSubmit={loginAttemptHandler} >\n                  \n        <label htmlFor=\"user\" >user</label>\n        <input type=\"text\" \n                name=\"user\" \n                id=\"user\" \n                value={formData.user}\n                required={true} \n                onChange={userHandler} >\n        </input>\n        \n        <label htmlFor=\"password\" >password</label>\n        <input type=\"text\" \n                name=\"password\" \n                id=\"password\" \n                value={formData.password}\n                required={true} \n                onChange={passwordHandler} >\n        </input>\n\n        <button type=\"submit\" aria-label=\"Submit login credentials\" >login</button>\n        {(didAuthFail) && <div className={styles.loginFail}>login failed</div>}\n\n        {/* temporary login bypass */}\n        <button type=\"button\" aria-label=\"Guest Entry\" onClick={validEntryHandler}>guest pass</button>\n      </form>\n    </div>\n  );\n};\n// ---- END OVERLAY COMPONENT ----\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst LoginModal = () => {\n\n  return (\n    <React.Fragment>\n      {ReactDOM.createPortal(<ModalBackdrop />, document.getElementById('backdrop-root'))}\n      {ReactDOM.createPortal(<LoginOverlay />, document.getElementById('overlay-root'))}\n    </React.Fragment>\n  )\n};\n\nexport default LoginModal;"]},"metadata":{},"sourceType":"module"}