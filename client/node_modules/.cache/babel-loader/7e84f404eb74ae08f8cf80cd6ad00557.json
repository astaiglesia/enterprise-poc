{"ast":null,"code":"var _jsxFileName = \"/home/computron/github/levelUp/redux-learning/src/features/LoginPage/LoginModal/LoginModal.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// need to hide password\n// need to reset the form fields on submit\nimport React, { useState } from \"react\";\nimport ReactDOM from 'react-dom';\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { toggleLoginModal } from './loginPageSlice';\nimport { attemptLogin } from \"../loginModalSlice\";\nimport styles from './LoginModal.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ModalBackdrop = () => {\n  _s();\n\n  const isModalOpen = useSelector(state => {\n    return state.login.isModalOpen;\n  });\n  const dispatch = useDispatch();\n\n  const closeModalHandler = e => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.backdrop,\n    onClick: \"closeModalHandler\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ModalBackdrop, \"pUXLD5mwCV7XgQKK46J66Puw7R8=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ModalBackdrop;\n\nconst LoginOverlay = () => {\n  _s2();\n\n  // set up local state to collect form data\n  const initialState = {\n    user: '',\n    password: ''\n  };\n  const [formData, setFormData] = useState(initialState);\n\n  const userHandler = e => {\n    setFormData(currentState => {\n      return { ...currentState,\n        user: e.target.value\n      };\n    });\n  };\n\n  const passwordHandler = e => {\n    setFormData(currentState => {\n      return { ...currentState,\n        password: e.target.value\n      };\n    });\n  }; // dispatch to redux-thunk for authentication\n  // -- if validated, redirect to dashboard page\n  // -- on fail, render fail\n\n\n  const dispatch = useDispatch();\n  const [isValidUser, setIsValidUser] = useState(false);\n  const [didAuthFail, setDidAuthFail] = useState(false);\n\n  const loginAttemptHandler = e => {\n    e.preventDefault();\n    e.target.blur();\n    dispatch(attemptLogin(formData)); // create asyncAttemptLogin\n    // -- handle promise onFulfillment\n    // (isValidUser) ? <redirect to dashboard> : set\n\n    setIsValidUser(currentState => !currentState); // mocks a valid return\n    // handle authentication failure\n\n    setDidAuthFail(currentState => {\n      setFormData(initialState);\n      return !currentState;\n    }); // mocks an auth fail\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: styles.modalContainer,\n    onSubmit: loginAttemptHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"user\",\n      children: \"username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"user\",\n      id: \"user\",\n      value: formData.user,\n      required: true,\n      onChange: userHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"password\",\n      children: \"password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"password\",\n      id: \"password\",\n      value: formData.password,\n      required: true,\n      onChange: passwordHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      \"aria-label\": \"Submit login credentials\",\n      children: \"login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }, this), didAuthFail && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loginFail,\n      children: \"login failed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(LoginOverlay, \"ev+7NkgYDX1lK1oh5pf1WPwqeTc=\", false, function () {\n  return [useDispatch];\n});\n\n_c2 = LoginOverlay;\n\nconst LoginModal = () => {\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(ModalBackdrop, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 30\n    }, this), document.getElementById('backdrop-root'))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = LoginModal;\nexport default LoginModal;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ModalBackdrop\");\n$RefreshReg$(_c2, \"LoginOverlay\");\n$RefreshReg$(_c3, \"LoginModal\");","map":{"version":3,"sources":["/home/computron/github/levelUp/redux-learning/src/features/LoginPage/LoginModal/LoginModal.jsx"],"names":["React","useState","ReactDOM","useSelector","useDispatch","toggleLoginModal","attemptLogin","styles","ModalBackdrop","isModalOpen","state","login","dispatch","closeModalHandler","e","backdrop","LoginOverlay","initialState","user","password","formData","setFormData","userHandler","currentState","target","value","passwordHandler","isValidUser","setIsValidUser","didAuthFail","setDidAuthFail","loginAttemptHandler","preventDefault","blur","modalContainer","loginFail","LoginModal","createPortal","document","getElementById"],"mappings":"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","sourcesContent":["// need to hide password\n// need to reset the form fields on submit\n\nimport React, { useState } from \"react\";\nimport ReactDOM from 'react-dom';\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\n\nimport { toggleLoginModal } from './loginPageSlice';\nimport { attemptLogin } from \"../loginModalSlice\";\nimport styles from './LoginModal.module.css';\n\nconst ModalBackdrop = () => {\n  const isModalOpen = useSelector(state => {\n    return state.login.isModalOpen;\n  });\n\n  const dispatch = useDispatch();\n\n  const closeModalHandler = e => {\n    \n  }\n\n  return (\n    <div className={styles.backdrop} onClick=\"closeModalHandler\" />\n  );\n};\n\n\n\n\n\nconst LoginOverlay = () => {\n  // set up local state to collect form data\n  const initialState = {\n    user: '',\n    password: '',\n  }\n  \n  const [formData, setFormData] = useState(initialState);\n\n  const userHandler = e => {\n    setFormData(currentState => {\n      return {\n        ...currentState,\n        user: e.target.value,\n      }\n    })\n  }\n\n  const passwordHandler = e => {\n    setFormData(currentState => {\n      return {\n        ...currentState,\n        password: e.target.value,\n      }\n    })\n  }\n\n  // dispatch to redux-thunk for authentication\n  // -- if validated, redirect to dashboard page\n  // -- on fail, render fail\n  const dispatch = useDispatch();\n  const [isValidUser, setIsValidUser] = useState(false);\n  const [didAuthFail, setDidAuthFail] = useState(false);\n\n  const loginAttemptHandler = e => {\n    e.preventDefault();\n    e.target.blur();\n\n    dispatch(attemptLogin(formData));\n    // create asyncAttemptLogin\n    \n    // -- handle promise onFulfillment\n    // (isValidUser) ? <redirect to dashboard> : set\n    setIsValidUser(currentState => !currentState); // mocks a valid return\n\n    // handle authentication failure\n    setDidAuthFail(currentState => {\n      setFormData(initialState);\n      return !currentState\n    }); // mocks an auth fail\n  }\n\n  return (\n    <form className={styles.modalContainer} onSubmit={loginAttemptHandler} >\n                \n    <label htmlFor=\"user\" >username</label>\n    <input type=\"text\" \n            name=\"user\" \n            id=\"user\" \n            value={formData.user}\n            required={true} \n            onChange={userHandler} >\n    </input>\n    \n    <label htmlFor=\"password\" >password</label>\n    <input type=\"text\" \n            name=\"password\" \n            id=\"password\" \n            value={formData.password}\n            required={true} \n            onChange={passwordHandler} >\n    </input>\n\n    <button type=\"submit\" aria-label=\"Submit login credentials\" >login</button>\n    {(didAuthFail) && <div className={styles.loginFail}>login failed</div>}\n  </form>\n  );\n};\n\n\nconst LoginModal = () => {\n\n  return (\n    <React.Fragment>\n      {ReactDOM.createPortal(<ModalBackdrop />, document.getElementById('backdrop-root'))}\n\n    </React.Fragment>\n  )\n};\n\nexport default LoginModal;"]},"metadata":{},"sourceType":"module"}